package com.spring.board.model;

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.mybatis.spring.SqlSessionTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

//=== #32. DAO 선언 ===


@Repository  
public class BoardDAO implements InterBoardDAO {
	
	
	// === #33. 의존객체 주입하기(DI: Dependency Injection) ===
	   // >>> 의존 객체 자동 주입(Automatic Dependency Injection)은
	   //     스프링 컨테이너가 자동적으로 의존 대상 객체를 찾아서 해당 객체에 필요한 의존객체를 주입하는 것을 말한다. 
	   //     단, 의존객체는 스프링 컨테이너속에 bean 으로 등록되어 있어야 한다. 

	   //     의존 객체 자동 주입(Automatic Dependency Injection)방법 3가지 
	   //     1. @Autowired ==> Spring Framework에서 지원하는 어노테이션이다. 
	   //                       스프링 컨테이너에 담겨진 의존객체를 주입할때 타입을 찾아서 연결(의존객체주입)한다.
				// 서버가 1개라면 가능하지만 2개 이상일 경우에는 안됨.
	   
	   //     2. @Resource  ==> Java 에서 지원하는 어노테이션이다.
	   //                       스프링 컨테이너에 담겨진 의존객체를 주입할때 필드명(이름)을 찾아서 연결(의존객체주입)한다.
	   
	   //     3. @Inject    ==> Java 에서 지원하는 어노테이션이다.
	   //                       스프링 컨테이너에 담겨진 의존객체를 주입할때 타입을 찾아서 연결(의존객체주입)한다.
	
		
	// local DB에 연결
	@Resource
	private SqlSessionTemplate sqlsession;
	// Type 에 따라 Spring 컨테이너가 알아서 root-context.xml 에 생성된 org.mybatis.spring.SqlSessionTemplate 의 bean 을  sqlsession 에 주입시켜준다. 
    // 그러므로 sqlsession 는 null 이 아니다.

	
	// 원격 DB에 연결
	@Resource
	private SqlSessionTemplate sqlsession2;
	
	
	
	// 로컬 DB의 HR에 연결
	@Resource 
	private SqlSessionTemplate sqlsession3;
	
	

	
	@Override
	public int test_insert() {
		
		int n=sqlsession.insert("board.test_insert");
		
		return n;
	
	}


	@Override
	public List<TestVO> test_select() {
		
		List<TestVO> testvoList = sqlsession.selectList("board.test_select");
		
		return testvoList;
		
	}
	
	
	
	@Override
	public int test_insert(Map<String, String> paraMap) {
			
		int n = sqlsession.insert("board.test_insert_map", paraMap);
		return n;
	}


	@Override
	public int test_insert(TestVO vo) {
		 
		int n = sqlsession.insert("board.test_insert_vo", vo);
		
		return n;
		
	}


	@Override
	public List<Map<String, String>> test_employees() {
		
		List<Map<String, String>> empList=sqlsession.selectList("hr.test_employees");
		return empList;
	}

	
	
	/*
	 * // === # 42. 로그인 처리하기 === //
	 * 
	 * @Override public MemberVO getLoginMember(Map<String, String> paraMap) {
	 * 
	 * MemberVO mvo=sqlsession.selectOne("board.getLoginMember", paraMap);
	 * 
	 * return mvo;
	 * 
	 * }
	 */
	
	// === # 43. 로그인 처리하기 === // 
		@Override
		public MemberVO getLoginMember(Map<String, String> paraMap) {
			
			
			MemberVO loginuser=sqlsession.selectOne("board.getLoginMember", paraMap);
			
			if(loginuser != null & loginuser.getPwdchangegap() >= 3) {
				
				loginuser.setRequirePwdChange(true);
			} 
				
			return loginuser;
			
		}


		@Override
		public int updateIdle(String userid) {
			
			int n = sqlsession.update("board.updateIdle", userid);
			return n;
		}
	
}


