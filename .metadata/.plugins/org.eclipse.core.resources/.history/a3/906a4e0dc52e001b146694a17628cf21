<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<mvc:annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<mvc:resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	
	
	<!-- === #19. 엑셀파일다운로드를 위해  BeanNameViewResolver 추가하기 === -->
    <!-- 스프링 프레임워크(Spring Framework)에서 JSP가 아닌 컨트롤러를 호출하여 파일을 다운로드 하려면 다음과 같은 단계를 거쳐야 한다. 
        BeanNameViewResolver 뷰 리졸버를 추가한 후 파일 다운로드를 처리해줄 빈을 등록한다.
            쉽게 생각해서 파일 다운로드 처리를 해주는 view 페이지 라고 생각하면 된다. -->
    
   <beans:bean id="excelDownloadView" class="com.spring.excel.ExcelDownloadView"/>
   <beans:bean id="beanNameViewResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver">
        <beans:property name="order" value="0"/>
    </beans:bean>
    
   <!-- BeanNameViewResolver 컨트롤러에서 리턴 받은 뷰의 이름과 빈에 등록되어 있는 id의 값이 같은것을 찾아서 빈을 실행시킬 때 쓰인다.
       주로 커스텀하게 만들어진 View 클래스를 뷰로 사용해야 하는 경우에 사용한다. 
   
           예를 들어 
           컨트롤러에서 뷰의 이름을 excelDownloadView 으로 주면 (즉, 리턴만 excelDownloadView 로 주면) 
        bean 객체의 id가 excelDownloadView 인것을 찾는다.

       @RequestMapping(value="/testExcel.action")
       public String testExcel() {
          return "excelDownloadView";
       }

       <beans:bean id="excelDownloadView" class="com.spring.excel.ExcelDownloadView"/>
                그리하여 com.spring.excel.ExcelDownloadView 클래스가 실행된다.    
                
                컨트롤러에서 view단 매핑시 jsp 파일로 매핑되지 않고, 해당 객체로 바로 매핑해주기 위해서는 
       servlet-context.xml 에서 BeanNameViewResolver 를 빈즈로 등록해주어야 한다.
        여기서 중요한것은 BeanNameViewResolver 빈즈의 순서가 InternalResourceViewResolver 보다 우선 이어야한다는 것이다.
      
       InternalResourceViewResolver가 BeanNameViewResolver 보다 더 우선순위를 갖으면 엑셀다운로드 작업을 진행하지 않고 
        해당 매핑이름에 .jsp를 달고 view를 찾게되기 때문이다.
       (ex : excelDownloadView.jsp를 찾느게 아니라 com.spring.excel.ExcelDownloadView 클래스파일의 실행이 필요한것이다.)
   -->
	
	
	
	
	
	<!-- ==== #18. Controller 에서 만들어진 데이터 정보를 view단 페이지인 jsp 페이지로 넘길시
                  view단 페이지의 지정은 return "view단페이지"; 와 같이 String 타입으로 넘겨주면
                  InternalResourceViewResolver 클래스의 객체가 이 문자열을 받아와서 prefix에 적어둔 경로를 view단페이지 앞에 붙이고,
                  view단페이지 뒤에는 .jsp 를 붙여서 view단 페이지로 설정해준다.
                          
            예> Controller 에서  return "member"; 로 하면
                  자동적으로 view단 페이지는   "/WEB-INF/views/member.jsp"; 가 되어진다. 
                  
           Controller 에서  return "product/prodview"; 로 하면
                  자동적으로 view단 페이지는   "/WEB-INF/views/product/prodview.jsp"; 가 되어진다. 
         
     == web.xml 에 기술된 DispatcherServlet 에게 뷰 정보를 전달하는 방법 == 
        Controller 단 에서 String 타입으로 뷰 이름을 주는 경우, 뷰 이름으로부터 실제로 사용할 뷰 객체를 매핑하여 결정(해결)해주는 뷰 리졸버가 필요하다.          
        InternalResourceViewResolver 는 Default(기본) 뷰 리졸버 로서 JSP를 뷰로 사용할 때 쓰인다.                 
   -->
   
   
	<!-- ==== #18. bean으로 등록될 @Component 클래스가 위치하는 패키지명 지정하기 ====  -->
	<!--  
	<context:component-scan base-package="com.spring.board" /> 
	-->
	
	<!-- 앞으로 생성할 모든 컨트롤러, 서비스단, Aspect 등  모든 클래스들(*.java)은
            항상 com.test.* 패키지 안에서 생성되어져야만 스프링컨테이너에 의해 스캔되어 자동적으로 bean 으로 등록되어진다.
        bean 으로 등록되어진 객체들만이 스프링컨테이너에 의해 의존객체주입(Dependency Injection)되는 등 
           스프링컨테이너가 자동으로 관리해주는 대상이 되어진다. 
           그러면 스프링컨테이너에 의해 자동으로 관리되어지도록 클래스를 bean 으로 등록시키고자 할때 사용되어지는 방법이 component-scan 을 사용하는 것이다.  
        component-scan 은 특정 클래스가 bean 으로 등록되어져 사용되도록 XML 파일에 일일이 bean등록을 하지 않더라도, 
        bean으로 등록되어 사용되어질 클래스는 패키지를 base-package 속에 만들고  클래스 명 위에 @Component 애노테이션만 써주기만 하면 
            해당 클래스는 자동으로 bean으로 등록되어 사용할 수 있게 되어진다. 
            
            
            그런데 @Controller , @Service , @Repository 애노테이션을 사용하는 클래스는
        @Controller , @Service , @Repository 애노테이션 속에 @Component 기능이 이미 포함되어져 있으므로
           굳이 @Component 를 또 다시 기술할 필요가 없다.
        @Controller , @Service , @Repository 기능이 없는 일반 클래스를 bean 으로 등록하여 사용하고자 할때  
            그 클래스는 패키지를 base-package 로 하고 클래스명 위에 @Component 애노테이션을 붙이기만 하면 된다.  
            
        bean 으로 등록되어진 클래스만이 스프링컨테이너가 자동적으로 관리를 해줄 수 있게 된다.
        
        name-generator="com.spring.common.FullBeanNameGenerator" 은  
        spring annotation-driven 시 bean name 중복(충돌,conflicts)을 해결하기 위해서 사용하는 커스트마이징된 BeanNameGenerator 이다. 
   	-->
	
	<context:component-scan base-package="com.spring.*" />
	
	
	
	
	
</beans:beans>
